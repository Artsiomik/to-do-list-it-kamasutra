{"version":3,"sources":["Components/AddItemForm.tsx","Components/EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","error","setError","addTaskHandler","trim","addItem","value","onChange","event","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","title","setTitle","e","onBlur","autoFocus","onDoubleClick","Todolist","NewTitle","changeToDoListTitle","id","removeToDoListHandler","addTask","tasksObj","map","el","isDone","type","changeStatus","checked","newValue","changeStatusTitle","removeTask","filter","changeFilterHandler","App","taskId","ToDoListID","setTasksObj","maped","newTitle","task","find","setToDoLists","toDoLists","filteredToDoList","toDoList","newTask","v1","ToDoListID1","ToDoListID2","filteredTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c465c3f5.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (newTitle: string) => void\r\n}\r\n\r\nexport const AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTaskTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (event.key === 'Enter') {\r\n            addTaskHandler();\r\n        }\r\n    }\r\n\r\n    const addTaskHandler = () => {\r\n        if (newTaskTitle.trim() !== '') {\r\n            props.addItem(newTaskTitle)\r\n            setNewTaskTitle('')\r\n        } else {\r\n            setError('Field is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={newTaskTitle}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? 'error' : ''}/>\r\n            <button onClick={addTaskHandler}>+</button>\r\n            {error && <div className=\"error-message\">Field is required</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input onChange={onChangeTitleHandler} onBlur={activateViewMode} value={title} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType} from './App'\r\nimport {AddItemForm} from './Components/AddItemForm';\r\nimport {EditableSpan} from './Components/EditableSpan';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasksObj: Array<TaskType>\r\n    removeTask: (id: string, ToDoListID: string) => void\r\n    changeFilterHandler: (value: FilterValueType, ToDoListID: string) => void\r\n    addTask: (newTitle: string, ToDoListID: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, ToDoListID: string) => void\r\n    changeStatusTitle: (taskId: string, newTitle: string, ToDoListID: string) => void\r\n    filter: FilterValueType\r\n    removeToDoListHandler: (ToDoListID: string) => void\r\n    changeToDoListTitle: (ToDoListID: string, NewTitle: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    const removeToDoListHandler = () => {\r\n        props.removeToDoListHandler(props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeToDoListTitle = (NewTitle: string) => {\r\n        props.changeToDoListTitle(props.id, NewTitle)\r\n    }\r\n\r\n    return <div>\r\n        <h3> <EditableSpan title={props.title}\r\n                           onChange={changeToDoListTitle}/>\r\n            <button className={'titleDelete'} onClick={removeToDoListHandler}>Delete</button>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n            {props.tasksObj.map((el) => {\r\n\r\n                const onChangeStatusHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeStatus(el.id, event.currentTarget.checked, props.id)\r\n\r\n                }\r\n                const onChangeTitleHandler = (newValue: string) => {\r\n                    props.changeStatusTitle(el.id, newValue, props.id)\r\n\r\n                }\r\n\r\n\r\n                const removeTaskHandler = () => props.removeTask(el.id, props.id)\r\n\r\n                return (\r\n                    <li key={el.id} className={el.isDone ? 'is-done' : ''}>\r\n                        <input type=\"checkbox\"\r\n                               onChange={onChangeStatusHandler}\r\n                               checked={el.isDone}/>\r\n                        <EditableSpan title={el.title}\r\n                        onChange={onChangeTitleHandler}/>\r\n                        <button className={'delete'} onClick={removeTaskHandler}>Delete</button>\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === 'All' ? 'active-filter' : ''}\r\n                    onClick={() => props.changeFilterHandler('All', props.id)}>All\r\n            </button>\r\n            <button className={props.filter === 'Active' ? 'active-filter' : ''}\r\n                    onClick={() => props.changeFilterHandler('Active', props.id)}>Active\r\n            </button>\r\n            <button className={props.filter === 'Completed' ? 'active-filter' : ''}\r\n                    onClick={() => props.changeFilterHandler('Completed', props.id)}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './Components/AddItemForm';\r\n\r\nexport type FilterValueType = 'All' | 'Active' | 'Completed';\r\n\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const changeStatus = (taskId: string, isDone: boolean, ToDoListID: string) => {\r\n        // let tasks = tasksObj[ToDoListID]\r\n        // let task = tasks.find(el => (el.id === taskId)\r\n        // )\r\n        // if (task) {\r\n        //     task.isDone = isDone\r\n        //     setTasksObj({...tasksObj})\r\n        // } -- можно так реализовать, но строка ниже более проще через тернарное вырвжение\r\n        setTasksObj({...tasksObj, [ToDoListID]: tasksObj[ToDoListID].map(maped => maped.id === taskId ? {...maped, isDone: isDone} : maped)})\r\n    }\r\n\r\n    const changeStatusTitle = (taskId: string, newTitle: string, ToDoListID: string) => {\r\n        let tasks = tasksObj[ToDoListID]\r\n        let task = tasks.find(el => (el.id === taskId)\r\n        )\r\n        if (task) {\r\n            task.title = newTitle\r\n            setTasksObj({...tasksObj})\r\n        }\r\n    }\r\n\r\n    const changeFilterHandler = (value: FilterValueType, ToDoListID: string) => {\r\n\r\n        // const toDoList = toDoLists.find(el => el.id === ToDoListID)\r\n        // if (toDoList) {\r\n        //     toDoList.filter = value\r\n        //     setToDoLists([...toDoLists])\r\n        // } -- можно так реализовать, но строка ниже более проще через тернарное вырвжение\r\n        setToDoLists(toDoLists.map(maped => maped.id === ToDoListID\r\n            ? {...maped, filter: value}\r\n            : maped))\r\n    }\r\n\r\n\r\n    const removeToDoListHandler = (ToDoListID: string) => {\r\n        let filteredToDoList = toDoLists.filter(el => el.id !== ToDoListID)\r\n        setToDoLists(filteredToDoList)\r\n        delete tasksObj[ToDoListID]\r\n        setTasksObj(tasksObj)\r\n    }\r\n\r\n    const changeToDoListTitle = (ToDoListID: string, NewTitle: string) => {\r\n        const toDoList = toDoLists.find(el => el.id === ToDoListID)\r\n        if (toDoList) {\r\n            toDoList.title = NewTitle\r\n            setToDoLists([...toDoLists])\r\n        }\r\n    }\r\n\r\n    const removeTask = (id: string, ToDoListID: string) => {\r\n        // let tasks = tasksObj[ToDoListID]\r\n        // tasksObj[ToDoListID] = tasks.filter((el) => el.id !== id)\r\n        // setTasksObj({...tasksObj}) -- можно так реализовать, но строка ниже более проще\r\n        setTasksObj({...tasksObj, [ToDoListID]: tasksObj[ToDoListID].filter((el) => el.id !== id)})\r\n    }\r\n\r\n    const addTask = (newTitle: string, ToDoListID: string) => {\r\n        // let newTask = {id: v1(), title: newTitle, isDone: false};\r\n        // let tasks = tasksObj[ToDoListID]\r\n        // tasksObj[ToDoListID] = [newTask, ...tasks]\r\n        // setTasksObj({...tasksObj}) -- можно так реализовать, но 2 строки ниже более проще\r\n        const newTask = {id: v1(), title: newTitle, isDone: false};\r\n        setTasksObj({...tasksObj, [ToDoListID]:[newTask, ...tasksObj[ToDoListID]]})\r\n    }\r\n\r\n    const ToDoListID1 = v1();\r\n    const ToDoListID2 = v1();\r\n\r\n    const [toDoLists, setToDoLists] = useState<Array<ToDoListType>>([\r\n        {id: ToDoListID1, title: 'What to learn', filter: 'All'},\r\n        {id: ToDoListID2, title: 'What to buy', filter: 'All'},\r\n    ])\r\n\r\n    const [tasksObj, setTasksObj] = useState<TasksStateType>({\r\n        [ToDoListID1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'ReactJS', isDone: false}\r\n        ],\r\n        [ToDoListID2]: [\r\n            {id: v1(), title: 'Milk', isDone: false},\r\n            {id: v1(), title: 'Choco', isDone: true}\r\n        ],\r\n    })\r\n\r\n    const addToDoList = (title: string) => {\r\n        const toDoList: ToDoListType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: 'All',\r\n        }\r\n        setToDoLists([toDoList, ...toDoLists])\r\n        setTasksObj({\r\n            ...tasksObj,\r\n            [toDoList.id]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <AddItemForm addItem={addToDoList}/>\r\n\r\n            {toDoLists.map((el) => {\r\n\r\n                let filteredTask = tasksObj[el.id]\r\n\r\n                if (el.filter === 'Active') {\r\n                    filteredTask = filteredTask.filter((el) => !el.isDone)\r\n                }\r\n                if (el.filter === 'Completed') {\r\n                    filteredTask = filteredTask.filter((el) => el.isDone)\r\n                }\r\n\r\n                return (\r\n                    <Todolist\r\n                        id={el.id}\r\n                        key={el.id}\r\n                        title={el.title}\r\n                        filter={el.filter}\r\n                        addTask={addTask}\r\n                        tasksObj={filteredTask}\r\n                        removeTask={removeTask}\r\n                        changeFilterHandler={changeFilterHandler}\r\n                        changeStatusTitle={changeStatusTitle}\r\n                        changeStatus={changeStatus}\r\n                        removeToDoListHandler={removeToDoListHandler}\r\n                        changeToDoListTitle={changeToDoListTitle}\r\n                    />)\r\n            })}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}